# -*- coding: utf-8 -*-
"""ExecDashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bn46yPCF12ezRyOamNIPtmgJ8yvjtO0n
"""

from dash import Dash, dcc, html, Input, Output, State, ctx
import dash_bootstrap_components as dbc
from dash.dash_table import DataTable
import pandas as pd

# Initialize the Dash app
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP], suppress_callback_exceptions=True)

# Original Data
original_data = pd.DataFrame({
    "Category": [
        "Overall Inpatient", "Overall Inpatient", "General Peds", "General Peds", "General Peds",
        "Heart Center", "Heart Center", "Heart Center", "Johnson Center", "Johnson Center", "Johnson Center",
        "Inflow", "Outflow"
    ],
    "Flow Story": [
        "Overall Inpatient Peds", "% of patients outside primary unit",
        "Acute Care", "PICU", "AC in PICU", "CVICU", "PCU200", "Cases to be admitted",
        "NICU/ICN", "Maternity", "L&D", "Admits", "Discharges"
    ],
    "Flow Range": [
        "90-95%", "<18%", "90-95%", "90-96%", "0", "90-96%", "85-92%", "-",
        "71-89%", "78-94%", "8-10", "15-20", "15-20"
    ],
    "Mon": [71, 14, 71, 82, 0, 70, 63, 14, 83, 53, 14, 19, 18],
    "Tue": [84, 14, 84, 97, 0, 73, 75, 14, 89, 75, 10, 18, 15],
    "Wed": [89, 20, 93, 91, 0, 73, 94, 7, 83, 76, 14, 13, 25],
    "Thu": [88, 19, 93, 91, 4, 73, 88, 8, 79, 81, 11, 14, 24],
    "Fri": [85, 16, 89, 90, 2, 72, 84, 10, 80, 74, 10, 16, 20],
    "Sat": [83, 12, 85, 87, 1, 70, 81, 6, 78, 72, 8, 12, 18],
    "Sun": [80, 10, 82, 85, 0, 68, 78, 5, 75, 70, 9, 11, 17]
})

# Helper function to parse flow range
def parse_flow_range(range_str):
    if pd.isna(range_str) or range_str.strip() == "-" or range_str.strip() == "":
        return (0, 0)  # Return (0, 0) for invalid ranges
    if "<" in range_str:
        return (0, float(range_str.strip("<%")))
    elif "-" in range_str:
        min_val, max_val = range_str.strip("%").split("-")
        return (float(min_val), float(max_val))
    else:
        return (float(range_str), float(range_str))

# Add Min and Max range columns
original_data["Min Range"], original_data["Max Range"] = zip(*original_data["Flow Range"].apply(parse_flow_range))

# Dropdown options for intervention
dropdown_options = [
    {"label": "Redirect transfer request", "value": "redirect_transfer"},
    {"label": "Expedite transfer and discharge", "value": "expedite_transfer"},
    {"label": "Cancel surgery", "value": "cancel_surgery"}
]

# Function to create the summary table
def create_summary_table(data):
    columns = [
        {"name": "Category", "id": "Category"},
        {"name": "Flow Story", "id": "Flow Story"},
        {"name": "Flow Range", "id": "Flow Range"},
        {"name": "Mon", "id": "Mon"},
        {"name": "Tue", "id": "Tue"},
        {"name": "Wed", "id": "Wed"},
        {"name": "Thu", "id": "Thu"},
        {"name": "Fri", "id": "Fri"},
        {"name": "Sat", "id": "Sat"},
        {"name": "Sun", "id": "Sun"}
    ]

    style_data_conditional = [
        # Apply colors to Category and Flow Story columns
        {"if": {"filter_query": "{Category} = 'Overall Inpatient'", "column_id": "Category"}, "backgroundColor": "#c6e0b4", "color": "black"},
        {"if": {"filter_query": "{Category} = 'Overall Inpatient'", "column_id": "Flow Story"}, "backgroundColor": "#c6e0b4", "color": "black"},

        {"if": {"filter_query": "{Category} = 'General Peds'", "column_id": "Category"}, "backgroundColor": "#f8cbad", "color": "black"},
        {"if": {"filter_query": "{Category} = 'General Peds'", "column_id": "Flow Story"}, "backgroundColor": "#f8cbad", "color": "black"},

        {"if": {"filter_query": "{Category} = 'Heart Center'", "column_id": "Category"}, "backgroundColor": "#f4b084", "color": "black"},
        {"if": {"filter_query": "{Category} = 'Heart Center'", "column_id": "Flow Story"}, "backgroundColor": "#f4b084", "color": "black"},

        {"if": {"filter_query": "{Category} = 'Johnson Center'", "column_id": "Category"}, "backgroundColor": "#bdd7ee", "color": "black"},
        {"if": {"filter_query": "{Category} = 'Johnson Center'", "column_id": "Flow Story"}, "backgroundColor": "#bdd7ee", "color": "black"},

        {"if": {"filter_query": "{Category} = 'Inflow'", "column_id": "Category"}, "backgroundColor": "#ffeb9c", "color": "black"},
        {"if": {"filter_query": "{Category} = 'Inflow'", "column_id": "Flow Story"}, "backgroundColor": "#ffeb9c", "color": "black"},

        {"if": {"filter_query": "{Category} = 'Outflow'", "column_id": "Category"}, "backgroundColor": "#ffe699", "color": "black"},
        {"if": {"filter_query": "{Category} = 'Outflow'", "column_id": "Flow Story"}, "backgroundColor": "#ffe699", "color": "black"},
    ]

    # Conditional formatting for numeric columns
    for day in ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]:
        style_data_conditional += [
            {"if": {"filter_query": f"{{{day}}} > {{Max Range}}", "column_id": day}, "backgroundColor": "#f8d7da", "color": "black"},
            {"if": {"filter_query": f"{{{day}}} >= {{Min Range}} && {{{day}}} <= {{Max Range}}", "column_id": day}, "backgroundColor": "#d4edda", "color": "black"},
            {"if": {"filter_query": f"{{{day}}} < {{Min Range}}", "column_id": day}, "backgroundColor": "#fff3cd", "color": "black"}
        ]

    return DataTable(
        id="summary-table",
        columns=columns,
        data=data.to_dict("records"),
        style_data_conditional=style_data_conditional,
        style_table={"overflowX": "auto"},
        style_cell={"textAlign": "center", "fontSize": "14px", "padding": "5px"},
        style_header={"fontWeight": "bold", "textAlign": "center", "backgroundColor": "#f4f4f4"}
    )

# Layout
app.layout = dbc.Container(fluid=True, children=[
    dbc.Row(dbc.Col(html.H1("Patient Flow Dashboard", className="text-center mb-4"), width=12)),
    dbc.Row(dbc.Col(create_summary_table(original_data), width=12)),
    dcc.Store(id="table-data", data=original_data.to_dict("records")),
    dcc.Store(id="original-data", data=original_data.to_dict("records")),
    dbc.Row([
        dbc.Col(dcc.Dropdown(
            id="intervention-dropdown",
            options=dropdown_options,
            placeholder="Choose an action",
            style={"margin": "20px"}
        ), width=6),
        dbc.Col(dbc.Button("Reset to Original", id="reset-button", color="danger", style={"margin": "20px"}), width=3)
    ])
])

# Callback to handle dropdown selection and update table
@app.callback(
    Output("table-data", "data"),
    [Input("intervention-dropdown", "value"),
     Input("reset-button", "n_clicks")],
    [State("summary-table", "active_cell"),
     State("original-data", "data"),
     State("table-data", "data")],
    prevent_initial_call=True
)
def update_or_reset_table(intervention, reset_clicks, active_cell, original_data, current_data):
    ctx_trigger = ctx.triggered_id

    # Reset the table to original
    if ctx_trigger == "reset-button":
        return original_data

    # Apply intervention if dropdown is selected
    if ctx_trigger == "intervention-dropdown" and active_cell:
        table_data = pd.DataFrame(current_data)
        reduction_map = {
            "redirect_transfer": 1,
            "expedite_transfer": 2,
            "cancel_surgery": 5
        }
        reduction = reduction_map.get(intervention, 0)

        column_id = active_cell["column_id"]
        row_id = active_cell["row"]

        if column_id in ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]:
            day_index = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"].index(column_id)
            for day in ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"][day_index:]:
                table_data.at[row_id, day] = max(0, table_data.at[row_id, day] - reduction)

        return table_data.to_dict("records")

    return current_data

# Callback to render updated table
@app.callback(
    Output("summary-table", "data"),
    Input("table-data", "data")
)
def render_updated_table(data):
    return data

if __name__ == "__main__":
    app.run_server()
